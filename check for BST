// we need to check if the given binary tree is a binary search tree or not
// empty tree and tree with single node is considered as binary search tree

// METHOD - 1 ( SIMPLE SOLUTION WHICH IS A WRONG APPROACH )

do any traversal and for every node check if the left child is smaller than right child. this is a wrong approach

// METHOD - 2 ( CORRECT BUT INEFFICIENT )

MAXIMUM AND MINIMUM SHOULD BE CHECKED FOR EVERY NODE

import java.util.*;
import java.io.*;
import java.lang.*;

class Node {
    int key;
    Node left, right;
    Node(int x)
    {
        key = x;
        left = right = null;
    }
}

class Gfg
{
    public static int maxValue(Node root){
        if (root == null) 
            return Integer.MIN_VALUE; 
      
        int res = root.key; 
        int lres = maxValue(root.left); 
        int rres = maxValue(root.right); 
        if (lres > res) 
            res = lres; 
        if (rres > res) 
            res = rres; 
        return res; 
    }
    
    public static int minValue(Node root) 
    { 
        if (root == null) 
          return Integer.MAX_VALUE; 
      
        int res = root.key; 
        int lres = minValue(root.left); 
        int rres = minValue(root.right); 
        if (lres < res) 
          res = lres; 
        if (rres < res) 
          res = rres; 
        return res; 
    }
    
    public static int isBST(Node root)  
    {  
      if (root == null)  
        return 1;  
          
      if (root.left!=null && maxValue(root.left) > root.key)  
        return 0;  
          
      if (root.right!=null && minValue(root.right) < root.key)  
        return 0;  
        
      if (isBST(root.left)==0 || isBST(root.right)==0)  
        return 0;  
          
      return 1;  
    } 
    public static void main(String args[])
    {
        Node root = new Node(4);  
        root.left = new Node(2);  
        root.right = new Node(5);  
        root.left.left = new Node(1);  
        root.left.right = new Node(3);  
          
        if (isBST(root)==1) 
            System.out.println("IS BST"); 
        else
            System.out.println("Not a BST");
    }
}

// METHOD - 3 (SPECIFYING A RANGE FOR EVERY NODE)

import java.util.*;
import java.io.*;
import java.lang.*;

class Node {
    int key;
    Node left, right;
    Node(int x)
    {
        key = x;
        left = right = null;
    }
}

class Gfg
{
    public static boolean isBST(Node root, int min, int max)  
    {  
      if (root == null)  
        return true;  
          
      return ( root.key>min && root.key<max && 
                isBST(root.left,min,root.key) && isBST(root.right,root.key,max));  
    }
    
    public static void main(String args[])
    {
        Node root = new Node(4);  
        root.left = new Node(2);  
        root.right = new Node(5);  
        root.left.left = new Node(1);  
        root.left.right = new Node(3);  
          
        if (isBST(root,Integer.MIN_VALUE,Integer.MAX_VALUE)) 
            System.out.println("IS BST"); 
        else
            System.out.println("Not a BST");
    }
}

// METHOD - 4 ( MOST EFFICIENT SOLUTION )

INORDER TRAVERSAL OF A BINARY SEARCH TREE IS ALWAYS SORTED

import java.util.*;
import java.io.*;
import java.lang.*;

class Node {
    int key;
    Node left, right;
    Node(int x)
    {
        key = x;
        left = right = null;
    }
}

class Gfg
{
    static int prev=Integer.MIN_VALUE;
    public static boolean isBST(Node root)  
    {  
        if (root == null)  
            return true;  
        
        if(isBST(root.left)==false)return false;
        
        if(root.key<=prev)return false;
        prev=root.key;
        
        return isBST(root.right);
    }
    
    public static void main(String args[])
    {
        Node root = new Node(4);  
        root.left = new Node(2);  
        root.right = new Node(5);  
        root.left.left = new Node(1);  
        root.left.right = new Node(3);  
          
        if (isBST(root)) 
            System.out.println("IS BST"); 
        else
            System.out.println("Not a BST");
    }
}
